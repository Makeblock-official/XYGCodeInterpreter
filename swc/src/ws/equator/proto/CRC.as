/*
 * Copyright 2011 Sergey Kolotsey.
 *
 * This file is part of AIRSerial library.
 *
 * AIRSerial is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AIRSerial is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public Licenise
 * along with AIRSerial. If not, see <http://www.gnu.org/licenses/>.
 *
 * =====================================================================
 * 
 * This class defines two CRC algorithms: the original algorithm that is used
 * in WAKE protocol and Dallas 1-wire CRC calcluation algorithm.
 * The 1-wire CRC is more prefferable because it is commonly used. If you want
 * your code to support original WAKE CRC, set variable CRC_ALGORITHM 
 * to CRC_WAKE and recompile the library.
 *  
 */
package ws.equator.proto {
	internal class CRC{
		static private var crc_method:int=CRC_METHOD_DALLAS;
		static public const CRC_METHOD_DALLAS:int=1;
		static public const CRC_METHOD_WAKE:int=2;
		static private const CRC_INIT_DALLAS:uint=0x00;
		static private const CRC_INIT_WAKE:uint=0xde;
		static private const CRC_TABLE_DALLAS:Array=[
				0x00, 0x5e, 0xbc, 0xe2, 0x61, 0x3f, 0xdd, 0x83, 0xc2, 0x9c, 0x7e, 0x20, 0xa3, 0xfd, 0x1f, 0x41,
				0x9d, 0xc3, 0x21, 0x7f, 0xfc, 0xa2, 0x40, 0x1e, 0x5f, 0x01, 0xe3, 0xbd, 0x3e, 0x60, 0x82, 0xdc,
				0x23, 0x7d, 0x9f, 0xc1, 0x42, 0x1c, 0xfe, 0xa0, 0xe1, 0xbf, 0x5d, 0x03, 0x80, 0xde, 0x3c, 0x62,
				0xbe, 0xe0, 0x02, 0x5c, 0xdf, 0x81, 0x63, 0x3d, 0x7c, 0x22, 0xc0, 0x9e, 0x1d, 0x43, 0xa1, 0xff,
				0x46, 0x18, 0xfa, 0xa4, 0x27, 0x79, 0x9b, 0xc5, 0x84, 0xda, 0x38, 0x66, 0xe5, 0xbb, 0x59, 0x07,
				0xdb, 0x85, 0x67, 0x39, 0xba, 0xe4, 0x06, 0x58, 0x19, 0x47, 0xa5, 0xfb, 0x78, 0x26, 0xc4, 0x9a,
				0x65, 0x3b, 0xd9, 0x87, 0x04, 0x5a, 0xb8, 0xe6, 0xa7, 0xf9, 0x1b, 0x45, 0xc6, 0x98, 0x7a, 0x24,
				0xf8, 0xa6, 0x44, 0x1a, 0x99, 0xc7, 0x25, 0x7b, 0x3a, 0x64, 0x86, 0xd8, 0x5b, 0x05, 0xe7, 0xb9,
				0x8c, 0xd2, 0x30, 0x6e, 0xed, 0xb3, 0x51, 0x0f, 0x4e, 0x10, 0xf2, 0xac, 0x2f, 0x71, 0x93, 0xcd,
				0x11, 0x4f, 0xad, 0xf3, 0x70, 0x2e, 0xcc, 0x92, 0xd3, 0x8d, 0x6f, 0x31, 0xb2, 0xec, 0x0e, 0x50,
				0xaf, 0xf1, 0x13, 0x4d, 0xce, 0x90, 0x72, 0x2c, 0x6d, 0x33, 0xd1, 0x8f, 0x0c, 0x52, 0xb0, 0xee,
				0x32, 0x6c, 0x8e, 0xd0, 0x53, 0x0d, 0xef, 0xb1, 0xf0, 0xae, 0x4c, 0x12, 0x91, 0xcf, 0x2d, 0x73,
				0xca, 0x94, 0x76, 0x28, 0xab, 0xf5, 0x17, 0x49, 0x08, 0x56, 0xb4, 0xea, 0x69, 0x37, 0xd5, 0x8b,
				0x57, 0x09, 0xeb, 0xb5, 0x36, 0x68, 0x8a, 0xd4, 0x95, 0xcb, 0x29, 0x77, 0xf4, 0xaa, 0x48, 0x16,
				0xe9, 0xb7, 0x55, 0x0b, 0x88, 0xd6, 0x34, 0x6a, 0x2b, 0x75, 0x97, 0xc9, 0x4a, 0x14, 0xf6, 0xa8,
				0x74, 0x2a, 0xc8, 0x96, 0x15, 0x4b, 0xa9, 0xf7, 0xb6, 0xe8, 0x0a, 0x54, 0xd7, 0x89, 0x6b, 0x35
			];
		
		private var crc:uint=0;
		
		/*
		 * CRC-8 with polynom X^8 + X^5 + X^4 + 1 (0x31)
		 * This CRC algorithm is used in Dallas 1-wire protocol
		 * 
		 * CRC model:
		 * 
		 * Width:       8
		 * Poly:        0x31
		 * Reflect In:  True
		 * XOR In:      0x00
		 * Reflect Out: True
		 * XOR Out:     0x00
		 * Check:       0xa1
		 */
		private function update_dallas( symbol:uint):void{
		    crc = (CRC_TABLE_DALLAS[ (crc ^ symbol) & 0xff] ^ (crc >> 8)) & 0xff;
		}
		

		/*
		 * This CRC-model is used in WAKE protocol. This algorithm is slow and 
		 * is not a standard. In our project Dallas 1-wire CRC calc algorithm
		 * is used by default.
		 * 
		 * If you want to use the original WAKE CRC, 
		 * set variable CRC_ALGORITHM to CRC_WAKE and recompile the library.
		 */
		private function update_wake( symbol: uint):void{
			var i: int; 
			for(i = 0; i < 8; i++){
				if(((symbol ^crc) & 1) != 0){
					crc = ((crc ^ 0x18) >> 1) | 0x80;
				}else{
					crc = ((crc >> 1) & ~0x80) & 0xff;
				}
				symbol = symbol >> 1;
			}
		}
		
		
		public function update( symbol:uint):void{
			crc_method==CRC_METHOD_WAKE? update_wake( symbol) : update_dallas( symbol);
		}
		
		public function finalize():uint{
			return crc;
		}
		
		public function CRC(method:int=CRC_METHOD_DALLAS):void{
			if( method==CRC_METHOD_WAKE){
				crc_method=CRC_METHOD_WAKE;
				crc=CRC_INIT_WAKE;
			}else{
				crc_method=CRC_METHOD_DALLAS;
				crc=CRC_INIT_DALLAS;
			}	
		}
	}
}
